const express = require('express')

const products = express.Router()

const {
    getAllProducts,
    getOneProduct,
    createOneProduct,
    updateOneProduct,
    deleteOneProduct,
  } = require("../queries/products.js");

products.get("/products", async (req, res) => {
    let productsDB = await db.any("SELECT * FROM products")
    res.status(200).json({success: true, data: productsDB})
})



// CRUD
// C - create ✅
// R - read ✅
// U - update ✅
// D - destroy ✅

/* /products/0, /products/1, /products/2, etc. */

products.get("/products/:id", validateId, async (req, res) => {
    console.log("Start of main function body")
    try {
        let productId = req.params.id
        let product = await db.oneOrNone("SELECT * FROM products WHERE id=$1", productId)
        res.status(200).json({success: true, data: product})
    } catch(err) {
        res.status(500).json({success: false, data: err})
    }
})

products.post("/products/new", validateBody, async (req, res) => {
    let body = req.body
    console.log(req, 'THIS SHOULD BE THE BODY')
    try {
        let product = await db.oneOrNone("INSERT INTO products (name, price, brand, model, description, condition) VALUES ($1, $2, $3, $4, $5, $6) RETURNING *", [body.name, body.price, body.brand, body.model, body.description, body.condition])
        res.status(201).json({success: true, data: product})
    } catch(err) {
        res.status(500).json({success: false, data: err})
    }
})

products.put("/products/:id", validateId, validateBody, async (req, res) => {
    console.log("testing start of update route")
    let id = req.params.id
    let body = req.body

    try {
        let updatedProduct = await db.oneOrNone("UPDATE products SET name=$1, price=$2, brand=$3, model=$4, description=$5, condition=$6 WHERE id=$7 RETURNING *", [
            body.name,
            body.price,
            body.brand,
            body.model,
            body.description,
            body.condition, 
            id
        ])
        res.status(201).json({success: true, data: updatedProduct})
    } catch (err) {
        res.status(500).json({success: false, data: err})
    }

})

products.delete("/products/:id", validateId, async (req, res) => {
    let id = req.params.id

    try {
        let deletedProduct = await db.oneOrNone("DELETE FROM products WHERE id=$1 RETURNING *", id)
        res.status(200).json({success: true, data: deletedProduct})
    } catch (error) {
        res.status(500).json({success: false, data: err})
    }
})

module.exports = products;